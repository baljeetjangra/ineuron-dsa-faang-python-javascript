## Implementation of Queue using two Stacks
class MyQueue:

    def __init__(self):
        self.stack1 = []
        self.stack2 = []
        self.front = None

    def push(self, x: int) -> None:
        if not self.stack1:
            self.front = x
        self.stack1.append(x)
        

    def pop(self) -> int:
        ## checking if there are elements already present in stack 2
        if not self.stack2:
            while self.stack1:
                self.stack2.append(self.stack1.pop())
        
        ans = self.stack2.pop()
        return ans

    def peek(self) -> int:
        if self.stack2:
            return self.stack2[-1]
        return self.front

    def empty(self) -> bool:
        return (not self.stack1 and not self.stack2)


# Your MyQueue object will be instantiated and called as such:
# obj = MyQueue()
# obj.push(x)
# param_2 = obj.pop()
# param_3 = obj.peek()
# param_4 = obj.empty()



## Implementation of Stack using two queues
## Javascript code
## Ngamlenmang Touthang
var MyStack = function() {
    this.queue1 = []
    this.queue2 = []
    
};

/** 
 * @param {number} x
 * @return {void}
 */
MyStack.prototype.push = function(x) {
    this.queue1.push(x)
};

/**
 * @return {number}
 */
MyStack.prototype.pop = function() {
    while(this.queue1.length > 1){
        this.queue2.push(this.queue1.shift())
    }
    let poped = this.queue1.shift()
    this.queue1 = this.queue2
    this.queue2 = []
    return poped
};

/**
 * @return {number}
 */
MyStack.prototype.top = function() {
    return this.queue1[this.queue1.length-1]
};

/**
 * @return {boolean}
 */
MyStack.prototype.empty = function() {
    return this.queue1.length ? false : true
};  

/** 
 * Your MyStack object will be instantiated and called as such:
 * var obj = new MyStack()
 * obj.push(x)
 * var param_2 = obj.pop()
 * var param_3 = obj.top()
 * var param_4 = obj.empty()
 */



## Python Code
## Ankan Bhattacharya


## Time Complexity: 
Push - O(1)
Pop - O(n)
top - O(1)
empty - O(1)

class MyStack:

    def __init__(self):
        self.q1 = []
        self.q2 = []

    def push(self, x: int) -> None:
        self.q1.append(x)

    def pop(self) -> int:
        if len(self.q1) == 0: return -1
        
        while len(self.q1) > 1:
            num = self.q1.pop(0)
            self.q2.append(num)
            
        our_num = self.q1.pop()
        
        while len(self.q2) > 0:
            num = self.q2.pop(0)
            self.q1.append(num)
            
        return our_num

    def top(self) -> int:
        if len(self.q1) == 0: return -1
        
        return self.q1[len(self.q1) - 1]

    def empty(self) -> bool:
        return len(self.q1) == 0
        


# Your MyStack object will be instantiated and called as such:
# obj = MyStack()
# obj.push(x)
# param_2 = obj.pop()
# param_3 = obj.top()
# param_4 = obj.empty()


